{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///E:/project%20groop/06-notehub-nextjs/lib/api/index.ts"],"sourcesContent":["// lib/api/index.ts\r\n\r\nimport axios from 'axios';\r\nimport type { AxiosResponse } from 'axios';\r\nimport type {\r\n  Note,\r\n  CreateNotePayload,\r\n  FetchNotesParams,\r\n  FetchNotesResponse,\r\n} from '@/types/note'; // Абсолютний імпорт\r\n\r\n// Створюємо екземпляр axios з базовим URL\r\nconst apiClient = axios.create({\r\n  baseURL: 'https://notehub-public.goit.study/api',\r\n});\r\n\r\n// Interceptor для автоматичного додавання токена авторизації\r\napiClient.interceptors.request.use(config => {\r\n  // Отримуємо токен з process.env для Next.js\r\n  const token = process.env.NEXT_PUBLIC_NOTEHUB_TOKEN;\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Функція для отримання списку нотаток з пагінацією та пошуком\r\nexport const fetchNotes = async (\r\n  params: FetchNotesParams = {}\r\n): Promise<FetchNotesResponse> => {\r\n  const response: AxiosResponse<FetchNotesResponse> = await apiClient.get(\r\n    '/notes',\r\n    {\r\n      params: {\r\n        page: params.page || 1,\r\n        search: params.search || '',\r\n        perPage: params.perPage || 12,\r\n      },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Функція для отримання однієї нотатки за її ID (потрібна для динамічної сторінки)\r\nexport const fetchNoteById = async (noteId: string): Promise<Note> => {\r\n  const response: AxiosResponse<Note> = await apiClient.get(`/notes/${noteId}`);\r\n  return response.data;\r\n};\r\n\r\n// Функція для створення нової нотатки\r\nexport const createNote = async (noteData: CreateNotePayload): Promise<Note> => {\r\n  const response: AxiosResponse<Note> = await apiClient.post('/notes', noteData);\r\n  return response.data;\r\n};\r\n\r\n// Функція для видалення нотатки\r\nexport const deleteNote = async (noteId: string): Promise<Note> => {\r\n  const response: AxiosResponse<Note> = await apiClient.delete(\r\n    `/notes/${noteId}`\r\n  );\r\n  return response.data;\r\n};"],"names":[],"mappings":"AAAA,mBAAmB;;;;;;;;;;;AAEnB;;AASA,0CAA0C;AAC1C,MAAM,YAAY,gJAAK,CAAC,MAAM,CAAC;IAC7B,SAAS;AACX;AAEA,6DAA6D;AAC7D,UAAU,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;IACjC,4CAA4C;IAC5C,MAAM;IACN,wCAAW;QACT,OAAO,OAAO,CAAC,aAAa,GAAG,CAAC,OAAO,EAAE,OAAO;IAClD;IACA,OAAO;AACT;AAGO,MAAM,aAAa,OACxB,SAA2B,CAAC,CAAC;IAE7B,MAAM,WAA8C,MAAM,UAAU,GAAG,CACrE,UACA;QACE,QAAQ;YACN,MAAM,OAAO,IAAI,IAAI;YACrB,QAAQ,OAAO,MAAM,IAAI;YACzB,SAAS,OAAO,OAAO,IAAI;QAC7B;IACF;IAEF,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,gBAAgB,OAAO;IAClC,MAAM,WAAgC,MAAM,UAAU,GAAG,CAAC,CAAC,OAAO,EAAE,QAAQ;IAC5E,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,aAAa,OAAO;IAC/B,MAAM,WAAgC,MAAM,UAAU,IAAI,CAAC,UAAU;IACrE,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,aAAa,OAAO;IAC/B,MAAM,WAAgC,MAAM,UAAU,MAAM,CAC1D,CAAC,OAAO,EAAE,QAAQ;IAEpB,OAAO,SAAS,IAAI;AACtB","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///E:/project%20groop/06-notehub-nextjs/app/notes/%5Bid%5D/NoteDetails.client.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/notes/[id]/NoteDetails.client.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/notes/[id]/NoteDetails.client.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAyS,GACtU,uEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///E:/project%20groop/06-notehub-nextjs/app/notes/%5Bid%5D/NoteDetails.client.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/notes/[id]/NoteDetails.client.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/notes/[id]/NoteDetails.client.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAqR,GAClT,mDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///E:/project%20groop/06-notehub-nextjs/app/notes/%5Bid%5D/page.tsx"],"sourcesContent":["import {\r\n  dehydrate,\r\n  HydrationBoundary,\r\n  QueryClient,\r\n} from '@tanstack/react-query';\r\nimport { fetchNoteById } from '@/lib/api';\r\nimport NoteDetailsClient from './NoteDetails.client';\r\n\r\ninterface NoteDetailsPageProps {\r\n  params: { id: string };\r\n}\r\n\r\nexport default async function NoteDetailsPage({ params }: NoteDetailsPageProps) {\r\n  // Ми очікуємо (await) на \"розгортання\" промісу params\r\n  const resolvedParams = await params;\r\n  const { id } = resolvedParams; // І тепер безпечно беремо id\r\n  \r\n  const queryClient = new QueryClient();\r\n\r\n  // Робимо попереднє завантаження даних для конкретної нотатки\r\n  await queryClient.prefetchQuery({\r\n    queryKey: ['notes', id], // Унікальний ключ для цієї нотатки\r\n    queryFn: () => fetchNoteById(id),\r\n  });\r\n\r\n  return (\r\n    <HydrationBoundary state={dehydrate(queryClient)}>\r\n      <NoteDetailsClient />\r\n    </HydrationBoundary>\r\n  );\r\n}"],"names":[],"mappings":";;;;;AAAA;AAAA;AAAA;AAKA;AACA;;;;;AAMe,eAAe,gBAAgB,EAAE,MAAM,EAAwB;IAC5E,sDAAsD;IACtD,MAAM,iBAAiB,MAAM;IAC7B,MAAM,EAAE,EAAE,EAAE,GAAG,gBAAgB,6BAA6B;IAE5D,MAAM,cAAc,IAAI,4LAAW;IAEnC,6DAA6D;IAC7D,MAAM,YAAY,aAAa,CAAC;QAC9B,UAAU;YAAC;YAAS;SAAG;QACvB,SAAS,IAAM,IAAA,oIAAa,EAAC;IAC/B;IAEA,qBACE,8OAAC,yMAAiB;QAAC,OAAO,IAAA,wLAAS,EAAC;kBAClC,cAAA,8OAAC,2JAAiB;;;;;;;;;;AAGxB","debugId":null}}]
}